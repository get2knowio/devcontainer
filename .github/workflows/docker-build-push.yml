name: Build, Test and Publish Unified DevContainer (multi-arch)

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (for DevContainer CLI)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install DevContainer CLI
        run: |
          npm install -g @devcontainers/cli

      - name: Set up QEMU (for cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image refs
        id: refs
        run: |
          IMAGE_REPO_PREFIX="ghcr.io/get2knowio"
          echo "repo=$IMAGE_REPO_PREFIX/devcontainer" >> $GITHUB_OUTPUT
          echo "ci_tag=ci-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push multi-arch unified image
        uses: devcontainers/ci@v0.3
        with:
          configFile: containers/base/devcontainer.json
          imageName: ${{ steps.refs.outputs.repo }}
          imageTag: ${{ steps.refs.outputs.ci_tag }}
          platform: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && 'always' || 'never' }}
          skipContainerUserIdUpdate: true
          cacheFrom: ${{ steps.refs.outputs.repo }}:ci-${{ github.sha }}
        env:
          BUILDKIT_PROGRESS: plain
          DOCKER_BUILDKIT: 1
          CURL_CONNECT_TIMEOUT: 60
          CURL_MAX_TIME: 300
          APT_ACQUIRE_RETRIES: 3

      - name: Build local test image
        run: |
          # Build a local copy using devcontainer CLI for testing
          devcontainer build \
            --workspace-folder containers/base \
            --config containers/base/devcontainer.json \
            --image-name ${{ steps.refs.outputs.repo }}:test-local

      - name: Run tests against built image
        env:
          IMAGE: ${{ steps.refs.outputs.repo }}:test-local
          DIND_TESTS: false
        run: |
          # Verify image exists locally
          docker image inspect $IMAGE >/dev/null 2>&1 || { 
            echo "❌ Image not available locally"
            exit 1
          }
          
          chmod +x ./scripts/*.sh || true
          chmod +x ./build ./build.sh ./test || true
          chmod +x ./scripts/test.sh
          ./scripts/test.sh

      - name: Extract metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.refs.outputs.repo }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Select canonical tag
        if: github.event_name != 'pull_request'
        id: canonical
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          canonical=$(echo "$tags" | head -n1)
          echo "canonical_ref=$canonical" >> $GITHUB_OUTPUT

      - name: Verify CI image availability
        if: github.event_name != 'pull_request'
        run: |
          src_tag='${{ steps.refs.outputs.repo }}:ci-${{ github.sha }}'
          echo "Verifying CI image: $src_tag"
          
          # Try to inspect the remote image to ensure it exists
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: Checking if $src_tag exists..."
            if docker buildx imagetools inspect "$src_tag" >/dev/null 2>&1; then
              echo "✅ CI image confirmed available: $src_tag"
              break
            fi
            echo "⏳ CI image not yet available, waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ CI image not available after $max_attempts attempts"
            exit 1
          fi

      - name: Promote CI image to canonical tag (manifest)
        if: github.event_name != 'pull_request'
        run: |
          src_tag='${{ steps.refs.outputs.repo }}:ci-${{ github.sha }}'
          dst_tag='${{ steps.canonical.outputs.canonical_ref }}'
          echo "Promoting $src_tag -> $dst_tag"
          docker buildx imagetools create --tag "$dst_tag" "$src_tag"

      - name: Retag and publish additional tags as manifest list
        if: github.event_name != 'pull_request' && steps.meta.outputs.tags != ''
        run: |
          canonical='${{ steps.canonical.outputs.canonical_ref }}'
          echo "Canonical: $canonical"
          echo "All tags:\n${{ steps.meta.outputs.tags }}"
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            if [ "$tag" = "$canonical" ]; then
              echo "Skip canonical tag $tag"
              continue
            fi
            echo "Creating manifest tag: $tag -> $canonical"
            docker buildx imagetools create --tag "$tag" "$canonical"
          done <<< "${{ steps.meta.outputs.tags }}"
