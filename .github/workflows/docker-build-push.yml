name: Test and Publish DevContainer Images (multi-arch)

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (for DevContainer CLI)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install DevContainer CLI
        run: |
          npm install -g @devcontainers/cli

      - name: Set up QEMU (for cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image refs
        id: refs
        run: |
          IMAGE_REPO_PREFIX="ghcr.io/get2knowio"
          echo "prefix=$IMAGE_REPO_PREFIX" >> $GITHUB_OUTPUT
          echo "commonRepo=$IMAGE_REPO_PREFIX/devcontainer-base-common" >> $GITHUB_OUTPUT
          echo "pyRepo=$IMAGE_REPO_PREFIX/devcontainer-python-base" >> $GITHUB_OUTPUT
          echo "tsRepo=$IMAGE_REPO_PREFIX/devcontainer-typescript-base" >> $GITHUB_OUTPUT
          echo "ciTag=ci-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "pyFull=$IMAGE_REPO_PREFIX/devcontainer-python-base:ci-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "tsFull=$IMAGE_REPO_PREFIX/devcontainer-typescript-base:ci-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push multi-arch images (common)
        if: github.event_name != 'pull_request'
        uses: devcontainers/ci@v0.3
        with:
          configFile: containers/common/devcontainer.json
          imageName: ${{ steps.refs.outputs.commonRepo }}
          imageTag: ${{ steps.refs.outputs.ciTag }}
          platform: linux/amd64,linux/arm64
          push: always

      - name: Build and push multi-arch images (python)
        if: github.event_name != 'pull_request'
        uses: devcontainers/ci@v0.3
        with:
          configFile: containers/python/devcontainer.json
          imageName: ${{ steps.refs.outputs.pyRepo }}
          imageTag: ${{ steps.refs.outputs.ciTag }}
          platform: linux/amd64,linux/arm64
          push: always

      - name: Build and push multi-arch images (typescript)
        if: github.event_name != 'pull_request'
        uses: devcontainers/ci@v0.3
        with:
          configFile: containers/typescript/devcontainer.json
          imageName: ${{ steps.refs.outputs.tsRepo }}
          imageTag: ${{ steps.refs.outputs.ciTag }}
          platform: linux/amd64,linux/arm64
          push: always

      - name: Run tests (build + validate both images) [PRs]
        if: github.event_name == 'pull_request'
        run: |
          chmod +x ./scripts/*.sh || true
          chmod +x ./build ./build.sh ./test || true
          chmod +x ./scripts/test.sh
          ./scripts/test.sh --build

      - name: Run tests against CI images [push/tags]
        if: github.event_name != 'pull_request'
        env:
          TYPESCRIPT_IMAGE: ${{ steps.refs.outputs.tsFull }}
          PYTHON_IMAGE: ${{ steps.refs.outputs.pyFull }}
          SKIP_BUILD: true
          DIND_TESTS: false
        run: |
          chmod +x ./scripts/*.sh || true
          chmod +x ./build ./build.sh ./test || true
          chmod +x ./scripts/test.sh
          ./scripts/test.sh
  
  publish-common:
    if: github.event_name != 'pull_request'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_REPO_PREFIX: ghcr.io/get2knowio
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image repo name (common)
        id: imagename
        run: |
          echo "repo=${{ env.IMAGE_REPO_PREFIX }}/devcontainer-base-common" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.imagename.outputs.repo }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Select canonical tag
        id: canonical
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          canonical=$(echo "$tags" | head -n1)
          image_repo="${canonical%:*}"
          tag_only="${canonical##*:}"
          echo "canonical_ref=$canonical" >> $GITHUB_OUTPUT
          echo "image_repo=$image_repo" >> $GITHUB_OUTPUT
          echo "tag_only=$tag_only" >> $GITHUB_OUTPUT

      - name: Promote CI image to canonical tag (manifest)
        run: |
          src_tag="${{ steps.imagename.outputs.repo }}:ci-${{ github.sha }}"
          dst_tag='${{ steps.canonical.outputs.canonical_ref }}'
          echo "Promoting $src_tag -> $dst_tag"
          docker buildx imagetools create --tag "$dst_tag" "$src_tag"

      - name: Retag and publish additional tags as manifest list
        if: ${{ steps.meta.outputs.tags != '' }}
        run: |
          canonical='${{ steps.canonical.outputs.canonical_ref }}'
          echo "Canonical: $canonical"
          echo "All tags:\n${{ steps.meta.outputs.tags }}"
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            if [ "$tag" = "$canonical" ]; then
              echo "Skip canonical tag $tag"
              continue
            fi
            echo "Creating manifest tag: $tag -> $canonical"
            docker buildx imagetools create --tag "$tag" "$canonical"
          done <<< "${{ steps.meta.outputs.tags }}"

  publish-children:
    if: github.event_name != 'pull_request'
    needs: [publish-common]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        container: [python, typescript]
    env:
      IMAGE_REPO_PREFIX: ghcr.io/get2knowio
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image repo name
        id: imagename
        run: |
          case "${{ matrix.container }}" in
            python) repo="${{ env.IMAGE_REPO_PREFIX }}/devcontainer-python-base" ;;
            typescript) repo="${{ env.IMAGE_REPO_PREFIX }}/devcontainer-typescript-base" ;;
          esac
          echo "repo=$repo" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.imagename.outputs.repo }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Select canonical tag
        id: canonical
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          canonical=$(echo "$tags" | head -n1)
          image_repo="${canonical%:*}"
          tag_only="${canonical##*:}"
          echo "canonical_ref=$canonical" >> $GITHUB_OUTPUT
          echo "image_repo=$image_repo" >> $GITHUB_OUTPUT
          echo "tag_only=$tag_only" >> $GITHUB_OUTPUT

      - name: Promote CI image to canonical tag (manifest)
        run: |
          src_tag="${{ steps.imagename.outputs.repo }}:ci-${{ github.sha }}"
          dst_tag='${{ steps.canonical.outputs.canonical_ref }}'
          echo "Promoting $src_tag -> $dst_tag"
          docker buildx imagetools create --tag "$dst_tag" "$src_tag"

      - name: Retag and publish additional tags as manifest list
        if: ${{ steps.meta.outputs.tags != '' }}
        run: |
          canonical='${{ steps.canonical.outputs.canonical_ref }}'
          echo "Canonical: $canonical"
          echo "All tags:\n${{ steps.meta.outputs.tags }}"
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            if [ "$tag" = "$canonical" ]; then
              echo "Skip canonical tag $tag"
              continue
            fi
            echo "Creating manifest tag: $tag -> $canonical"
            docker buildx imagetools create --tag "$tag" "$canonical"
          done <<< "${{ steps.meta.outputs.tags }}"
